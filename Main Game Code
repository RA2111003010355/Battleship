// Online C compiler to run C program online
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
int aiB[5][5];
int uiB[5][5];
int ship[3][4];
int sinkCount=3;
int selfSink=3;
bool hunt=false;
void Hunt(int , int);
void EndGame();

void Input();void Initialise();
 int main()
{
    printf("Welcome to Battleship.Please set your ships and board on paper first.\n0 is for miss,1 is for hit and 2 is for sink\n");
    sleep(5);
    Initialise();
    Input();
    return 0;
    
}
 void Initialise()
 {
    for (int i=0;i<5;i++)
    {
        for(int j=0;j<5;j++)
        {
            aiB[i][j]=0;
            uiB[i][j]=0;
        }
    }
    for(int i=0;i<3;i++){
        ship[i][3]=0;
    }
    ship[2][2]=55;
    for (int i=0;i<3;i++)
    {
        bool gotShip=false;
        int x,y, len;
        srand(time(0));
        x=rand()%4;
        y=rand()%4;
        if (ship[i][2]==55)
            len=2;
        else 
            len=3;
        while (gotShip==true)
        {
            int shipPlace= rand()%3;
            int modx,mody, isOccupied=0;
            switch(shipPlace){
                case 0: if(y-len>0)
                        modx= 0;mody=-1;
                    
                        break;
                case 1: if(x-len>0)
                          modx= -1;mody=0;
                        break;
                case 2: if(y+len>0)
                          modx= 0;mody=1;
                        break;
                case 3: if(y+len>0)
                          modx= 1;mody=0;
                        break;
                
                
            }
            int tempx=x,tempy=y;
            for (int j=0;j<len;j++){
                if(aiB[tempx][tempy]!=0)
                    isOccupied=1;
                tempx= tempx+modx;
                tempy= tempy+mody;
            }
            if(isOccupied==0){
                for(int j=0;j<len;j++)
                {
                    ship[i][j]=x*10+y;
                    aiB[x][y]=1;
                    x= x+modx;
                    y=y+mody;
                }
            }
        }
        
    }
 }
 

 void Play(){
    int inp;//this is giving a guess
    srand(time(0));
    sleep(2);
    printf("My Turn.\n");
    int playCoordx,playCoordy;
    for(;;){
         playCoordx=rand()%4;
         playCoordy=rand()%4;
          if (uiB[playCoordx][playCoordy]==0)
         {
             printf("%d%d\n",playCoordx+1,playCoordy+1);
             break;
         }
   }
    scanf("%d",&inp);//taking the guess response and editing the player's board it has
    switch(inp){
        case 2: sinkCount--;
                break;
        
        case 1: uiB[playCoordx][playCoordy]=2;
                hunt=true;
                Input(playCoordx,playCoordy);
                break;
        default: uiB[playCoordx][playCoordy]=1;
                break;
    }
   Input();
 }
void Input(){
    int input, coordx, coordy;
    
    printf("Player's Turn.\n");//taking player's guess
    scanf("%d",&input);
    input= input-11;
    coordx= input/10;
    coordy= input%10;
    sleep(2);
    if(aiB[coordx][coordy]==0)//checking the guess on its board
    printf("miss.\n");
    else {//whole thing onwards is to check if its a sink 
        aiB[coordx][coordy]=2;
         int sinkneg;
         for(int i=0;i<3;i++){
            if (ship[i][3]=1)
             continue;
             else {
                    int j=0;
                   while(j<3){
                        if(input==ship[i][j])
                         sinkneg=i ;
                         j++;
                   }
                 }
         }
         int count,t;
         if(ship[sinkneg][2]==55)
            t=3;
        else 
            t=2;
        count=t;
         for (int i=0;i<t;i++){
            int shipx= ship[sinkneg][i]/10, shipy= ship[sinkneg][i]%10;
            if (uiB[shipx][shipy]==2)
                count--;
         }
         if(count==0){
            selfSink--;
            printf("sink.\n");
            ship[sinkneg][3]=1;
            EndGame();
         }
         else
            printf("hit.\n");
         
        
    }
    if(hunt==false)
    Play();
}
void Hunt(int coordx, int coordy){
    int a[]={0,1,0,-1}, b[]={1,0,-1,0};
    int dirx,diry;
    int shipsink; 
    for(int i=0;i<4;i++)
    {
        int playinp;
        int huntx = a[i];
        int hunty = b[i];
        if(coordx+huntx<0||coordx+huntx>=4)
            continue;
        if(coordy+hunty<0||coordy+hunty>=4)
            continue;
          if (uiB[coordx+huntx][coordy+hunty]==0)
          {
             printf("My Turn.\n");
             sleep(2);
             
             printf("%d%d\n",coordx+huntx,coordy+hunty);
             scanf("%d",&playinp);
             if (playinp==1){
                 dirx= huntx;
                 diry= hunty;
                 Input();
                 break;
             }
             else 
                Input();

          }
          else 
            continue;

    }
        int coordtx= coordx+dirx;
        int coordty= coordy+diry;
    while(shipsink!=2)
    {
        coordtx= coordtx+dirx;
        coordty= coordty+diry;
        printf("My Turn.\n");
        sleep(2);
        printf("%d%d\n",coordtx,coordty);
        scanf("%d",&shipsink);
        if(shipsink==0)
        {

            coordtx= coordx;
            coordty= coordy;
            if(dirx==1)
                dirx= -1;
            else if(dirx==-1)
                dirx= 1;
            else if(diry==1)
                diry= -1;
            
            else 
                diry= 1;
        }
        
    }
    sinkCount--; 
        hunt=false;
         EndGame();
        Input();
}
void EndGame(){
    if(sinkCount==0){
        printf("I win.");
        exit(0);
    }
    else if(selfSink==0){
        printf("You win.");
        exit(0);
    }
    else 
        Input();

}

